<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Product List | Stock System</title>
  <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
  <link rel="stylesheet" href="/css/style.css">
  <style>
    .pagination-btn {
      @apply px-3 py-1 rounded text-sm;
    }
    .pagination-btn:not(.active) {
      @apply bg-gray-200 text-gray-700 hover:bg-gray-300;
    }
    .pagination-btn:disabled {
      @apply bg-gray-200 text-gray-400 cursor-not-allowed;
    }
    .pagination-btn.active {
      @apply bg-blue-600 text-white;
    }
  </style>
</head>
<body class="flex bg-gray-100 min-h-screen">

  <!-- Sidebar -->
  <%- include('partials/sidebar', { currentUser: currentUser, currentRole: currentRole }) %>

  <!-- Main Content -->
  <main class="flex-1 p-6 min-w-0">
    <div class="flex justify-between items-center mb-2">
      <h1 class="text-3xl font-bold">ðŸ“¦ Product List</h1>
    </div>
    <p class="text-gray-700 mb-4 text-sm"><span id="productSummary">Loading products...</span></p>

    <!-- Filters -->
    <div class="flex flex-col md:flex-row md:items-center md:space-x-4 mb-6">
      <select id="categorySelect" class="p-2 border rounded mb-2 md:mb-0 text-sm">
        <option value="">-- All Categories --</option>
      </select>
      <input type="text" id="searchInput" placeholder="Search product..." class="p-2 border rounded flex-1 min-w-0 text-sm">
    </div>

    <!-- Product Table -->
    <div class="overflow-x-auto bg-white shadow rounded-lg min-w-0">
      <table class="min-w-full divide-y divide-gray-200 text-sm table-auto">
        <thead class="bg-gray-50">
          <tr>
            <th class="px-3 py-2 text-left font-medium text-gray-500 uppercase tracking-wider w-8">#</th>
            <th class="px-3 py-2 text-left font-medium text-gray-500 uppercase tracking-wider max-w-xs">Category</th>
            <th class="px-3 py-2 text-left font-medium text-gray-500 uppercase tracking-wider max-w-xs">Product Name</th>
          </tr>
        </thead>
        <tbody id="productTable" class="bg-white divide-y divide-gray-200">
          <tr>
            <td colspan="3" class="text-center py-2 text-gray-500">Loading products...</td>
          </tr>
        </tbody>
      </table>
    </div>

    <!-- Pagination Controls -->
    <div id="paginationControls" class="flex justify-between items-center mt-6">
      <button id="prevPageBtn" class="pagination-btn px-4 py-2 bg-gray-300 text-gray-800 rounded hover:bg-gray-400">Previous</button>
      <div id="pageNumbers" class="flex space-x-2"></div>
      <button id="nextPageBtn" class="pagination-btn px-4 py-2 bg-gray-300 text-gray-800 rounded hover:bg-gray-400">Next</button>
    </div>
  </main>

  <script>
    document.addEventListener('DOMContentLoaded', async () => {
      // --- DOM Elements ---
      const categorySelect = document.getElementById('categorySelect');
      const searchInput = document.getElementById('searchInput');
      const productTable = document.getElementById('productTable');
      const productSummary = document.getElementById('productSummary');

      const prevPageBtn = document.getElementById('prevPageBtn');
      const nextPageBtn = document.getElementById('nextPageBtn');
      const pageNumbersContainer = document.getElementById('pageNumbers');

      // --- Global State ---
      let allProducts = [];
      let allCategories = [];
      let currentPage = 1;
      const limit = 10;
      let totalPages = 1;
      let totalItems = 0;

      // --- Load Categories ---
      async function loadCategories() {
        try {
          const res = await fetch('/categories');
          allCategories = await res.json();
          categorySelect.innerHTML = `<option value="">-- All Categories --</option>`;
          allCategories.forEach(cat => {
            const opt = document.createElement('option');
            opt.value = cat;
            opt.textContent = cat.charAt(0).toUpperCase() + cat.slice(1);
            categorySelect.appendChild(opt);
          });
        } catch (err) {
          console.error('Error fetching categories:', err);
        }
      }

      // --- Render Products ---
      function renderProducts(products) {
        if (!products || products.length === 0) {
          productTable.innerHTML = `<tr><td colspan="3" class="text-center py-2 text-gray-500">No products found matching your criteria.</td></tr>`;
          productSummary.textContent = `Showing 0 to 0 of ${totalItems} results.`;
          return;
        }

        const startIndex = (currentPage - 1) * limit + 1;
        const endIndex = Math.min(startIndex + products.length - 1, totalItems);
        productSummary.textContent = `Showing ${startIndex} to ${endIndex} of ${totalItems} results.`;

        productTable.innerHTML = products.map((p, idx) => `
          <tr>
            <td class="px-3 py-2">${(currentPage - 1) * limit + idx + 1}</td>
            <td class="px-3 py-2 max-w-xs">${p.category || 'N/A'}</td>
            <td class="px-3 py-2 max-w-xs">${p.productName || 'N/A'}</td>
          </tr>
        `).join('');
      }

      // --- Render Pagination Controls ---
      function renderPagination() {
        pageNumbersContainer.innerHTML = '';

        prevPageBtn.disabled = (currentPage === 1);
        nextPageBtn.disabled = (currentPage === totalPages || totalPages === 0);

        if (totalPages <= 1) {
          document.getElementById('paginationControls').classList.add('hidden');
          return;
        } else {
          document.getElementById('paginationControls').classList.remove('hidden');
        }

        let startPage = Math.max(1, currentPage - 2);
        let endPage = Math.min(totalPages, currentPage + 2);

        if (currentPage <= 3 && totalPages > 5) {
          startPage = 1;
          endPage = 5;
        }
        if (currentPage >= totalPages - 2 && totalPages > 5) {
          startPage = Math.max(1, totalPages - 4);
          endPage = totalPages;
        }

        if (startPage > 1) {
          const firstPageBtn = document.createElement('button');
          firstPageBtn.textContent = '1';
          firstPageBtn.classList.add('pagination-btn');
          firstPageBtn.addEventListener('click', () => fetchProducts(1));
          pageNumbersContainer.appendChild(firstPageBtn);
          if (startPage > 2) {
            const ellipsis = document.createElement('span');
            ellipsis.textContent = '...';
            ellipsis.classList.add('px-2', 'py-1', 'text-gray-700');
            pageNumbersContainer.appendChild(ellipsis);
          }
        }

        for (let i = startPage; i <= endPage; i++) {
          const pageBtn = document.createElement('button');
          pageBtn.textContent = i;
          pageBtn.classList.add('pagination-btn');
          if (i === currentPage) {
            pageBtn.classList.add('active');
          }
          pageBtn.addEventListener('click', () => fetchProducts(i));
          pageNumbersContainer.appendChild(pageBtn);
        }

        if (endPage < totalPages) {
          if (endPage < totalPages - 1) {
            const ellipsis = document.createElement('span');
            ellipsis.textContent = '...';
            ellipsis.classList.add('px-2', 'py-1', 'text-gray-700');
            pageNumbersContainer.appendChild(ellipsis);
          }
          const lastPageBtn = document.createElement('button');
          lastPageBtn.textContent = totalPages;
          lastPageBtn.classList.add('pagination-btn');
          lastPageBtn.addEventListener('click', () => fetchProducts(totalPages));
          pageNumbersContainer.appendChild(lastPageBtn);
        }
      }

      // --- Fetch Products ---
      async function fetchProducts(page = currentPage) {
        currentPage = page;
        const selectedCategory = categorySelect.value;
        const searchQuery = searchInput.value.trim();

        let url = `/products/all?page=${currentPage}&limit=${limit}`;
        if (selectedCategory) url += `&category=${encodeURIComponent(selectedCategory)}`;
        if (searchQuery) url += `&search=${encodeURIComponent(searchQuery)}`;

        try {
          productTable.innerHTML = `<tr><td colspan="3" class="text-center py-2 text-gray-500">Loading products...</td></tr>`;
          productSummary.textContent = `Loading products...`;

          const res = await fetch(url);
          if (!res.ok) throw new Error(`HTTP error! status: ${res.status}`);

          const data = await res.json();
          allProducts = data.products;
          totalPages = data.totalPages;
          totalItems = data.totalProducts;
          currentPage = data.currentPage;

          renderProducts(allProducts);
          renderPagination();
        } catch (err) {
          console.error('Error fetching products:', err);
          productTable.innerHTML = `<tr><td colspan="3" class="text-center py-2 text-red-500">Error loading products. Please try again.</td></tr>`;
          productSummary.textContent = `Error loading products.`;
        }
      }

      // --- Event Listeners ---
      categorySelect.addEventListener('change', () => fetchProducts(1));
      searchInput.addEventListener('input', () => fetchProducts(1));

      prevPageBtn.addEventListener('click', () => {
        if (currentPage > 1) fetchProducts(currentPage - 1);
      });
      nextPageBtn.addEventListener('click', () => {
        if (currentPage < totalPages) fetchProducts(currentPage + 1);
      });

      // --- Initial Load ---
      await loadCategories();
      await fetchProducts(1);
    });
  </script>
</body>
</html>
