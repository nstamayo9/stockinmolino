<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>New Incoming Waybill | Stock System</title>
  <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
  <link href="https://cdn.jsdelivr.net/npm/selectize/dist/css/selectize.default.css" rel="stylesheet">
  <link rel="stylesheet" href="/css/style.css">
  <style>
    body {
      background-color: #f3f4f6; /* Light gray background */
    }
    .waybill-card-container { /* Renamed for clarity vs waybill-card class */
      background: linear-gradient(135deg, #fff, #fef3c7); /* soft gradient for cards */
      border-radius: 1rem;
      box-shadow: 0 4px 12px rgba(0,0,0,0.05);
      padding: 1.5rem;
      margin-bottom: 1rem;
      transition: transform 0.2s, box-shadow 0.2s;
    }
    .waybill-card-container:hover {
      transform: translateY(-2px);
      box-shadow: 0 8px 20px rgba(0,0,0,0.1);
    }
    button:disabled {
      opacity: 0.6;
      cursor: not-allowed;
    }
    .selectize-control.single .selectize-input.input-active {
        border-color: #3b82f6; /* Tailwind blue-500 */
        box-shadow: 0 0 0 1px #3b82f6;
    }
    .selectize-dropdown {
        background: #fff;
        border: 1px solid #e5e7eb; /* Tailwind gray-200 */
        border-radius: 0.5rem;
        box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
        z-index: 1000; /* Ensure dropdown is above modals if any */
    }
    .selectize-dropdown-content .option {
        padding: 0.5rem 0.75rem;
    }
    .selectize-dropdown-content .option.selected {
        background-color: #eff6ff; /* Tailwind blue-50 */
        color: #1c64f2; /* Tailwind blue-700 */
    }
    .selectize-dropdown-content .option.active {
        background-color: #e0e7ff; /* Tailwind blue-100 */
    }

    /* Styles to make Selectize control look like a standard Tailwind input */
    .selectize-control.single .selectize-input,
    .selectize-control.single .selectize-input.input-active {
      height: 40px; /* Equivalent to h-10 */
      padding: 0.5rem 0.75rem; /* Equivalent to p-2, p-3 on some inputs */
      border-radius: 0.25rem; /* rounded-md */
      border: 1px solid #d1d5db; /* border-gray-300 */
      box-shadow: 0 1px 2px 0 rgba(0, 0, 0, 0.05); /* shadow-sm */
      display: flex;
      align-items: center;
      line-height: normal; /* Override Selectize default */
    }
    .selectize-control.single .selectize-input input {
      padding: 0;
      line-height: normal;
    }
    .selectize-control.single .selectize-input .item {
      padding: 0;
      line-height: normal;
    }
    .selectize-control.single .selectize-input.focus {
      border-color: #3b82f6; /* focus:border-blue-500 */
      box-shadow: 0 0 0 1px #3b82f6; /* focus:ring-2 focus:ring-blue-500 */
    }

  </style>
</head>
<body class="flex min-h-screen">

  <!-- Sidebar -->
  <%- include('partials/sidebar', { currentUser: currentUser, currentRole: currentRole }) %>

  <main class="flex-1 p-6">
    <h1 class="text-3xl font-bold mb-6 text-gray-800">ðŸ“¥ New Incoming Waybill</h1>

    <form id="waybillForm" method="POST" action="/incoming" class="bg-white shadow-lg rounded-xl p-6">
      <div id="waybillsContainer"></div>

      <div class="flex flex-col md:flex-row gap-4 mt-4">
        <button type="button" id="addWaybill" 
          class="flex-1 bg-purple-500 text-white px-4 py-2 rounded-lg hover:bg-purple-600 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-purple-500 transition">
          + Add Another Waybill
        </button>

        <button type="submit" id="saveWaybills" disabled
          class="flex-1 bg-green-500 text-white px-4 py-2 rounded-lg hover:bg-green-600 focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-green-500 transition">
          Save All Waybills
        </button>
      </div>
    </form>
  </main>

  <script src="https://cdn.jsdelivr.net/npm/jquery/dist/jquery.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/selectize/dist/js/standalone/selectize.min.js"></script>

  <!-- JavaScript logic from waybill_form_logic.js embedded directly -->
  <script>
    // products and categories will be loaded once and used across all waybill cards
    let allProducts = [];
    let allCategories = [];
    let waybillCount = 0; // To keep track of waybill cards

    // Helper to get global UOM options (from server-side EJS)
    const globalUomOptions = <%- JSON.stringify(uomOptions) %>;

    // --- HTML ESCAPE UTILITIES ---
    function escapeHtmlAttribute(str) {
        if (typeof str !== 'string' && typeof str !== 'number') return '';
        str = String(str);
        const map = { '&': '&amp;', '<': '&lt;', '>': '&gt;', '"': '&quot;', "'": '&#x27;', '`': '&#x60;', '=': '&#x3D;' };
        return str.replace(/[&<>"'`=]/g, m => map[m]);
    }

    function escapeHtmlText(str) {
        if (typeof str !== 'string' && typeof str !== 'number') return '';
        str = String(str);
        const map = { '&': '&amp;', '<': '&lt;', '>': '&gt;', '"': '&quot;', "'": '&#039;' };
        return str.replace(/[&<>"']/g, m => map[m]);
    }

    // --- Function to fetch all products for dropdowns ---
    async function fetchAllProducts() {
        try {
            // Request a very high limit to get all products for dropdown selection
            const response = await fetch('/products/all?limit=9999');
            if (!response.ok) {
                const errorText = await response.text();
                throw new Error(`Failed to fetch products: ${response.status} ${response.statusText} - ${errorText}`);
            }
            const responseData = await response.json();
            allProducts = responseData.products || []; // Extract the products array
            allProducts.sort((a, b) => a.productName.localeCompare(b.productName)); // Sort alphabetically
            console.log("Products loaded:", allProducts.length);
        } catch (error) {
            console.error('Error fetching all products:', error);
            alert('Failed to load products for dropdowns. Please refresh the page.');
            allProducts = []; // Ensure it's an empty array on failure
        }
    }

    // --- Function to fetch all categories ---
    async function fetchAllCategories() {
        try {
            const response = await fetch('/categories');
            if (!response.ok) {
                const errorText = await response.text();
                throw new Error(`Failed to fetch categories: ${response.status} ${response.statusText} - ${errorText}`);
            }
            allCategories = await response.json();
            console.log("Categories loaded:", allCategories.length);
        } catch (error) {
            console.error('Error fetching all categories:', error);
            alert('Failed to load categories for dropdowns. Please refresh the page.');
            allCategories = []; // Ensure it's an empty array on failure
        }
    }

    // --- FIX SELECTIZE DROPDOWN POSITION ---
    // This makes sure selectize dropdowns stay in view when scrolling
    function fixSelectizeDropdown(selectizeInstance) {
        selectizeInstance.positionDropdown = function() {
            const $control = this.$control;
            const $dropdown = this.$dropdown;
            const controlRect = $control[0].getBoundingClientRect();
            $dropdown.css({
                top: controlRect.top + $control.outerHeight() + (window.scrollY || window.pageYOffset),
                left: controlRect.left + (window.scrollX || window.pageXOffset),
                width: controlRect.width,
                position: 'absolute',
                zIndex: 2147483647 // High z-index to always be on top
            });
        };
        selectizeInstance.on('dropdown_open', () => selectizeInstance.positionDropdown());
    }

    // Recalculate all dropdowns on scroll/resize (JQuery needed for selectize-control)
    $(window).on('scroll resize', () => {
        $('.selectize-control').each(function() {
            if (this.selectize) this.selectize.positionDropdown();
        });
    });


    // --- Function to create a single product item row ---
    function createItemRow(waybillIdx, itemIdx, itemData = {}) {
        const tr = document.createElement("tr");
        // Use a class for item rows to easily identify them later if needed
        tr.classList.add("product-item-row");
        tr.innerHTML = `
            <td class="px-2 py-1 border">
                <select name="waybills[${waybillIdx}][items][${itemIdx}][productName]" class="product-select w-full" required>
                    <option value="">-- Select Product --</option>
                    ${allProducts.map(p =>
                        `<option value="${escapeHtmlAttribute(p.productName)}" ${itemData.productName === p.productName ? 'selected' : ''} data-category="${escapeHtmlAttribute(p.category || '')}">
                            ${escapeHtmlText(p.productName)}
                        </option>`).join('')}
                </select>
            </td>
            <td class="px-2 py-1 border">
                <input type="number" name="waybills[${waybillIdx}][items][${itemIdx}][incoming]"
                       value="${escapeHtmlAttribute(itemData.incoming !== undefined ? itemData.incoming : '')}"
                       class="w-full p-2 border rounded focus:ring-blue-500 focus:border-blue-500 h-10" min="0" required>
            </td>
            <td class="px-2 py-1 border">
                <select name="waybills[${waybillIdx}][items][${itemIdx}][uomIncoming]" class="uom-select-item w-full" required>
                    <option value="">-- Select UOM --</option>
                    ${globalUomOptions.map(uom => `<option value="${escapeHtmlAttribute(uom)}" ${itemData.uomIncoming === uom ? 'selected' : ''}>${escapeHtmlText(uom)}</option>`).join('')}
                </select>
            </td>
            <td class="px-2 py-1 border text-center">
                <button type="button" class="remove-item-btn text-red-500 hover:underline">Remove</button>
            </td>
        `;

        // Initialize Selectize for product dropdown
        const productSelectizeInstance = $(tr.querySelector(".product-select")).selectize({
            create: false,
            sortField: 'text',
            dropdownParent: 'body',
            plugins: ['dropdown_header'], // Optional: for category display
            dropdownHeader: {
                title: 'Select Product'
            },
            render: {
                item: function(item, escape) {
                    const selectedProduct = allProducts.find(p => p.productName === item.value);
                    const category = selectedProduct ? selectedProduct.category : '';
                    return `<div>${escape(item.text)} ${category ? `<span class="text-xs text-gray-500 ml-2">(${escape(category)})</span>` : ''}</div>`;
                },
                option: function(item, escape) {
                    const selectedProduct = allProducts.find(p => p.productName === item.value);
                    const category = selectedProduct ? selectedProduct.category : '';
                    return `<div>${escape(item.text)} ${category ? `<span class="text-xs text-gray-500 ml-2">(${escape(category)})</span>` : ''}</div>`;
                }
            }
        })[0].selectize;
        fixSelectizeDropdown(productSelectizeInstance);


        // Initialize Selectize for UOM for ITEM ROWS
        const uomSelectizeItemInstance = $(tr.querySelector(".uom-select-item")).selectize({
            create: false,
            sortField: 'text',
            dropdownParent: 'body'
        })[0].selectize;
        fixSelectizeDropdown(uomSelectizeItemInstance);

        tr.querySelector(".remove-item-btn").addEventListener("click", () => tr.remove());
        return tr;
    }

    // --- Function to create a waybill card ---
    function createWaybillBlock(data = {}, isEditMode = false) {
        const wbIndex = isEditMode ? 0 : waybillCount++; // Use waybillCount++ for unique index
        const div = document.createElement("div");
        div.classList.add("waybill-card-container", "mb-6", "border", "p-4", "rounded");

        const waybillDate = data.date ? new Date(data.date).toISOString().split('T')[0] : '';

        div.innerHTML = `
            <div class="flex items-center justify-between mb-4 pb-2 border-b border-gray-200">
              <h3 class="text-lg font-semibold text-gray-800">Waybill #${wbIndex + 1}</h3>
              ${!isEditMode ? `<button type="button" class="remove-waybill-btn text-red-600 hover:text-red-800">Remove Waybill</button>` : ''}
            </div>

            <div class="grid grid-cols-1 md:grid-cols-4 gap-4 mb-4 items-start">
              <div>
                <label class="block font-medium mb-1 text-gray-700">Waybill No <span class="text-red-500">*</span></label>
                <input type="text" name="waybills[${wbIndex}][waybillNo]" value="${escapeHtmlAttribute(data.waybillNo || '')}"
                       required class="w-full p-2 border border-gray-300 rounded focus:ring-blue-500 focus:border-blue-500 h-10">
              </div>
              <div>
                <label class="block font-medium mb-1 text-gray-700">Count <span class="text-red-500">*</span></label>
                <input type="number" name="waybills[${wbIndex}][count]" value="${escapeHtmlAttribute(data.count !== undefined ? data.count : '')}"
                       required class="w-full p-2 border border-gray-300 rounded focus:ring-blue-500 focus:border-blue-500 h-10" min="0">
              </div>
              <div class="waybill-uom-field">
                <label class="block font-medium mb-1 text-gray-700">UOM <span class="text-red-500">*</span></label>
                <select name="waybills[${wbIndex}][uom]" class="uom-select-waybill w-full" required>
                    <option value="">-- Select UOM --</option>
                    ${globalUomOptions.map(uom => `<option value="${escapeHtmlAttribute(uom)}" ${data.uom === uom ? 'selected' : ''}>${escapeHtmlText(uom)}</option>`).join('')}
                </select>
              </div>
              <div>
                <label class="block font-medium mb-1 text-gray-700">Date</label>
                <input type="date" name="waybills[${wbIndex}][date]" value="${escapeHtmlAttribute(waybillDate)}"
                       class="w-full p-2 border border-gray-300 rounded focus:ring-blue-500 focus:border-blue-500 h-10">
              </div>
            </div>

            <h4 class="font-medium mb-2 text-gray-700">Items:</h4>
            
            <button type="button" class="add-item-row-btn mb-4 bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
              + Add Product
            </button>

            <div class="overflow-x-auto mb-4">
                <table class="min-w-full divide-y divide-gray-200 border border-gray-200 rounded">
                    <thead class="bg-gray-100">
                        <tr>
                            <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Product Name</th>
                            <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Incoming QTY</th>
                            <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">UOM</th>
                            <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Action</th>
                        </tr>
                    </thead>
                    <tbody class="itemsBody divide-y divide-gray-200"></tbody>
                </table>
            </div>
        `;

        // Initialize waybill UOM selectize
        const uomSelectWaybillElement = div.querySelector(".uom-select-waybill");
        const uomSelectizeWaybill = $(uomSelectWaybillElement).selectize({
            create: false,
            sortField: 'text',
            dropdownParent: 'body'
        })[0].selectize;
        fixSelectizeDropdown(uomSelectizeWaybill);


        const itemsBody = div.querySelector(".itemsBody");
        let currentItemIndex = 0;
        if (data.items && data.items.length) {
            data.items.forEach(item => {
                itemsBody.appendChild(createItemRow(wbIndex, currentItemIndex++, item));
            });
        } else {
            itemsBody.appendChild(createItemRow(wbIndex, currentItemIndex++));
        }

        div.querySelector(".add-item-row-btn").addEventListener("click", () => {
            itemsBody.appendChild(createItemRow(wbIndex, currentItemIndex++));
        });

        if (!isEditMode) {
            const removeBtn = div.querySelector(".remove-waybill-btn");
            if (removeBtn) removeBtn.addEventListener("click", () => {
                div.remove();
                toggleSaveButton(); // Re-check save button status after removing
            });
        }

        document.getElementById("waybillsContainer").appendChild(div);
        return div;
    }

    // --- Main Initialization and Event Listeners ---
    let initialLoadComplete = false; // Flag to ensure product/category load only once

    // Function to enable/disable Save button based on waybill cards
    const saveBtn = document.getElementById('saveWaybills');
    const waybillsContainer = document.getElementById('waybillsContainer');

    function toggleSaveButton() {
        saveBtn.disabled = waybillsContainer.children.length === 0;
    }

    document.addEventListener('DOMContentLoaded', async () => {
        // Load products and categories once on initial page load
        if (!initialLoadComplete) {
            await fetchAllProducts();
            await fetchAllCategories();
            initialLoadComplete = true;
        }

        // --- Initialize first waybill form on fresh load ---
        if (waybillsContainer.children.length === 0) { // Only add if no waybills exist
            createWaybillBlock({}, false);
        }
        
        // Add event listener for "Add Another Waybill" button
        document.getElementById("addWaybill").addEventListener("click", () => {
            createWaybillBlock({}, false);
            toggleSaveButton(); // Immediately re-check save button status
        });

        // Use MutationObserver for dynamic removal of waybill cards
        // This watches for changes to the children of waybillsContainer
        const observer = new MutationObserver(toggleSaveButton);
        observer.observe(waybillsContainer, { childList: true });

        // Initial check for save button status
        toggleSaveButton();

        // --- Form submission handler ---
        document.getElementById('waybillForm').addEventListener('submit', (event) => {
            // Basic client-side validation before submission
            let isValid = true;
            document.querySelectorAll('.waybill-card-container').forEach(card => {
                card.querySelectorAll('input[required], select[required]').forEach(field => {
                    // Check selectize fields separately
                    if ($(field).hasClass('selectized')) {
                        const selectizeInstance = $(field)[0].selectize;
                        if (!selectizeInstance.getValue()) {
                            isValid = false;
                            $(selectizeInstance.$control).addClass('border-red-500 ring-red-500'); // Apply error style to selectize control
                        } else {
                            $(selectizeInstance.$control).removeClass('border-red-500 ring-red-500');
                        }
                    } else if (!field.value.trim()) {
                        isValid = false;
                        field.classList.add('border-red-500', 'ring-red-500'); // Highlight empty fields
                    } else {
                        field.classList.remove('border-red-500', 'ring-red-500');
                    }
                });
            });

            if (!isValid) {
                event.preventDefault(); // Stop form submission
                alert('Please fill in all required fields.');
            }
        });
    });
  </script>
</body>
</html>